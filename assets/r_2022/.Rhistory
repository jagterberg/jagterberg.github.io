sum(ebay > 100)/length(ebay)
3/13
shuttle <- c(0,1,0,NA,0,0)
shuttle > 0
is.na(shuttle)
shuttle[!is.na(shuttle)]
mean(shuttle)
?mean
is.na(shuttle)
!is.na(shuttle)
mean(shuttle)
mean(shuttle,na.rm=TRUE)
shuttle
mean(shuttle[!is.na(shuttle)])
ls()
rm(ebay)
ebay
rm(list = ls())
rm(ls())
?rm
x
x <- 2
rm(list=ls())
install.packages("MASS")
library('MASS')
?MASS
??MASS
library(irlba)
names(geyser)
geyser
names(geyser)
geyser$waiting
attach(geyser)
waiting
detach(geyser)
getwd()
setwd("C:/Users/joshu/Dropbox/Documents/Research/misc_and_old/website/jagterberg.github.io/assets/r_2022")
getwd()
?read.table
dat <- read.table("train.csv", sep = ",")
dat
dat <- read.table("train.csv",header=TRUE, sep = ",")
dat
dat <- read.table("train.csv", sep = ",")
dat
names(dat)
names(dat)[1]
dat["V1"]
summary(dat)
summary(dat[c("V1","V2","V3")])
dat <- read.table("train.csv",header=TRUE, sep = ",")
dat
names(dat)
names(dat)[1]
dat["Id"]
summary(dat)
1 + 1
#Problem 1:
1 + 1
#-----------------------
#Problem 2:
2+2
#----------------------
#Problem 6
dat <- read.table("train.csv",sep = ",")
summary(dat)
library(UsingR)
central.park.cloud
?central.park.cloud
table(central.park.cloud)
class(table(central.park.cloud))
table(central.park.cloud)/length(central.park.cloud)
barplot(central.park.cloud)
barplot(table(central.park.cloud))
barplot(table(central.park.cloud), ylab = "Frequency")
barplot(table(central.park.cloud)/length(central.park.cloud), ylab = "Proportion")
?plot
?barplot
sales <- c(45,44,46)
names(sales) <- c("John","Jack","Suzy")
sales
barplot(sales, main = "Sales", ylab = "Pieces Sold")
barplot(sales, main = "Sales", ylab = "Pieces Sold", ylim = c(42,46), xpd = F)
dotchart(sales, xlab = "No. Sales")
sales
dat <- read.table("train.csv", sep = ",")
1461
length(dat)
nrow(dat)
ebay <- c(88.8, 88.3, 90.2, 93.5, 94.7, 99.2, 99.4, 101.6)
x <- c(1,5,9)
ebay[c(1,5,9)]
ebay[x]
install.packages("tidyverse")
install.packages("tidyverse")
library('tidyverse')
install.packages("nycflights13")
library(UsingR)
central.park.cloud
table(central.park.cloud)
table(central.park.cloud)/length(central.park.cloud)
barplot(table(central.park.cloud))
barplot(table(central.park.cloud), ylab = "Frequency")
barplot(table(central.park.cloud)/length(central.park.cloud), ylab = "Proportion")
sales <- c(45,44,46)
names(sales) <- c("John","Jack","Suzy")
barplot(sales, main = "Sales", ylab = "Pieces Sold")
barplot(sales, main = "Sales", ylab = "Pieces Sold", ylim = c(42,46), xpd = F)
dotchart(sales, xlab = "No. Sales")
dotchart(sales, xlab = "No. Sales",main="title")
?plot
x <- c(2,3,16,23,14,12,4,13,2,0,0,0,6,28,31,14,4,8,2,5)
stem(x, scale = 2)
?stem
x <- c(2,3,16,23,14,12,4,13,2,0,0,0,6,28,31,14,4,8,2,5.6)
stem(x, scale = 2)
sum(x)/length(x)
mean(x)
x.new = c(x,350)
mean(x.new)
median(x)
median(x.new)
which.max(table(x))
range(x)
diff(range(x))
?diff
range(x)
range(x)[1] - range(x)[2]
abs(range(x)[1] - range(x)[2])
table(x)
x <- c(2,3,16,23,14,12,4,13,2,0,0,0,6,28,31,14,4,8,2,5)
x.new = c(x,350)
table(x)
which.max(c(1,3,2))
which.max(table(x))
y <- x
y[length(y)] <- NULL
y <- x[c(1:(length(x)-1))]
y
x
table
table(x)
y <- table(x)
?table
sales <- c(45,44,46)
names(sales) <- c("John","Jack","Suzy")
table(sales)
which.max(table(sales))
which.max(table(x))
table(x)
diff(range(x))
var(x)
sd(x)
sqrt(var(x))
mean(x)
IQR(x)
quantile(x, seq(0,1,by=.25))
?quantile
quantile(x, seq(0,1,by=.2))
summary(x)
dat <- read.table("train.csv", sep = ",",header=TRUE)
summary(dat)
rm(dat)
attach(faithful)
hist(waiting) #defaults
?hist
hist(waiting, breaks = 10) #suggest 10 bins
hist(waiting, breaks = 5) #suggest 10 bins
hist(waiting, breaks = 100) #suggest 10 bins
hist(waiting, breaks = 1000) #suggest 10 bins
faithful
faithful$waiting
hist(waiting, breaks = 10) #suggest 10 bins
hist(waiting, breaks = seq(43,108,length=10)) #use these breaks
seq(43,108,length=10)
hist(waiting, breaks = "Scott") #use "Scott" algorithm
hist(waiting,freq = FALSE)
lines(density(waiting))
?density
detach(faithful)
cfb
summary(cfb)
?cfb
attach(cfb)
summary(VEHIC)
hist(VEHIC, breaks="Scott", freq=F)
lines(density(VEHIC))
detach(cfb)
attach(alltime.movies)
boxplot(Gross,ylab="All-time gross sales")
hist(Gross)
lines(density(Gross))
hist(Gross,freq = FALSE)
lines(density(Gross))
detach(alltime.movies)
dat <- read.table("train.csv", sep = ",",header=FALSE)
View(dat)
dat <- read.table("train.csv", sep = ",",header = TRUE)
View(dat)
View(dat)
iris <- iris
summary(iris)
dhf <- density(iris$Sepal.Length)
dhf
dhf$n
summary(dhf)
letters
x=1:2; y=letters[1:2]; z=1:3
data.frame(x,y)
data.frame(x,y,z) #error due to unequal lengths
list(x,y,z) #unnamed components
joshuaslist <- listy(x,y,z)
joshuaslist <- list(x,y,z)
rm(joshuaslist)
list(x.name=x,y.name=y,z.name=z) #named components
list(x,y,c(x,y,z))
list(x,y,list(x,y,z),z)
DF = data.frame(x,y)
DF
summary(DF)
DF$x
x
z
DF[,'x'] #access column named x
DF[c(1:5),'x']
DF[c(1:5),c('x','y')]
DF[1,'x']
DF
DF[1,1]
DF$x
DF$x[1]
DF[1,'x']
DF[1,]
DF[1,'y']
names(iris)
iris[c(1:3),c("Petal.Length","Petal.Width")]
iris[c(1:3),c("Petal.Length","petal.Width")]
library(UsingR)
attach(babies)
?babies
not.these = (gestation==999) | (age==99) |(inc==98)
not.these
TMP = babies[!not.these,
c('gestation','age', 'wt','inc')]
babs <- babies
pairs(TMP)
detach(babies)
?pairs
?quantile
attach(npdbn)
attach(npdb)
table(state)
class(quantile(c(1,2,3)))
library('tidyverse')
iris <- iris
dhf <- density(iris$Sepal.Length)
x=1:2; y=letters[1:2]; z=1:3
data.frame(x,y)
data.frame(x,y,z) #error due to unequal lengths
list(x,y,z) #unnamed components
list(x.name=x,y.name=y,z.name=z) #named components
DF = data.frame(x,y)
DF$x #access x column of DF
DF[,'x'] #access column named x
DF$x[1] #access first entry in column x of DF
DF[1,2] # access entry in first row, second column
library(UsingR)
attach(babies)
not.these = (gestation==999) | (age==99) |(inc==98)
TMP = babies[!not.these,
c('gestation','age', 'wt','inc')]
pairs(TMP)
detach(babies)
attach(babies)
detach(babies)
id
pbn = read.csv("Popular_Baby_Names.csv", sep=',')
pbn1 = pbn %>% filter(Year.of.Birth == 2011) %>% group_by(Child.s.First.Name) %>% summarise(tot = sum(Count)) %>% filter(tot > 1000) %>% arrange(desc(tot))
library(dplyr)
pbn1 = pbn %>% filter(Year.of.Birth == 2011) %>% group_by(Child.s.First.Name) %>% summarise(tot = sum(Count)) %>% filter(tot > 1000) %>% arrange(desc(tot))
ggplot(pbn1, aes(Child.s.First.Name, tot)) + geom_bar(stat='identity')
library(ggplot2)
ggplot(pbn1, aes(Child.s.First.Name, tot)) + geom_bar(stat='identity')
pbn1
x <- 5
if(x > 0) {
print("Positive number")
} #end if(x>0)
x<- -5
if( x>0) {
print("Positive number")
} else {
print("Non-positive number")
}
x <- 5
if( x>0) {
print("Positive number")
} else {
print("Non-positive number")
}
x > 0
x <- -5
x > 0
x <- -5
if(x>0) 5 else 6
y <- if(x>0) 5 else 6
"a" < 0
if(x<0){
print("Negative number")
} else if(x>0){
print("Positive number")
} else {
print("Zero")
}
x <- 0
if(x<0){
print("Negative number")
} else if(x>0){
print("Positive number")
} else {
print("Zero")
}
a <- c(1,2,3); b <- letters[1:3]; x <- -1:1
x
y <- ifelse(x<0, a, b)
y
vec1 <- c(1:10)
vec2 <- rep(c(1:5),2)
vec3 <- letters[1:10]
vec4 <- "J"
ifelse(vec1 <= 5, vec3, ifelse(vec2 <= 3,vec3,vec4))
vec2
vec2 <- c(1:3)
ifelse(vec1 <= 5, vec3, ifelse(vec2 <= 3,vec3,vec4))
ifelse(vec2 <= 3,vec3,vec4)
vec3 <- letters[1:9]
ifelse(vec1 <= 5, vec3,"J")
ifelse(vec1 <= 5, "J",vec3)
c(1:10)
for (i in c(1:10)) { print("hello")}
for (i in c(1:10)) { print(paste("i = ",i))}
x <- c(-1,-2,3,-4)
count <- 0
for(val in x){
if(val < 0) {
count <- count+1
}
}
count
i <- 1
i <- 1
while(i<6){
print(i)
i <- i+1
}
i <- 1
while(i<6){
print(paste("i is",i))
i <- i+1
}
x <- 1:5
for(val in x){
if(val==3){
break
}
print(val)
}
for(val in x){
if(val ==3){next}
print(val)
}
x <- 1
repeat{
print(x)
x=x+1
if(x==6){break}
}
x <- 1
while( x < 6) {
print(x)
x <- x + 1
}
?log
log
hello <- function(){
print(paste('hello world'))
}
hello()
hello <- function(name="Joshua") {
print(paste('hello world, my name is',name))
}
hello("Joshua")
hello()
hello("JBerg")
hello("not Sam")
hello("Joshua","not Sam")
pow <- function(x, y){
result = x^y
print(paste(x, "raised to the power", y, "is", result))
}
pow(8, 2)
pow(x = 8, y = 2)
pow(y = 2, x = 8)
pow(x <- 8,y=2)
pow <- function(x, y = 2){
z <- 12
vec1 <- 1000000
vec2 <- "J"
vec3 <- data.frame()
result = x^y
print(paste(x, "raised to the power", y, "is", result))
}
pow(3, 1)
pow <- function(x, y = 2){
result = x^y
print(paste(x, "raised to the power", y, "is", result))
}
pow(3)
pow(3, 1)
pow(y = 3)
pow(3,1)
check <- function(x){
if(x>0){
result <- "Positive"
}
else if(x<0){
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(0)
check(1)
poz <- check(0)
log(3)
x <- log(3)
multi_return = function(color = "red",size = c(20,10),shape = "round"){
my_list = list(color= color, size= size, shape= shape)
return(my_list)
}
result <- multi_return()
result
result <- multi_return(color = c("red","blue"),size = c(1:10),shape = "square")
result
source("C:/Users/joshu/Dropbox/Documents/Research/misc_and_old/website/jagterberg.github.io/assets/r_2022/lec4.R", echo=TRUE)
multi_return = function(color = "red",size = c(20,10),shape = "round"){
my_list = list(color= color, size= size, shape= shape)
return(my_list)
}
result <- multi_return()
result
result <- multi_return(color = c("red","blue"),size = c(1:10),shape = "square")
result
result$color
recursive.factorial <- function(x){
if(x==0) {
return(1)
}
else {
return(x*recursive.factorial(x-1))
}
}
recursive.factorial(3)
recursive.factorial(100) #slow for big numbers
system.time(recursive.factorial(3))
system.time(recursive.factorial(100))
system.time(recursive.factorial(1000))
system.time(recursive.factorial(10000))
system.time(recursive.factorial(2000))
system.time(recursive.factorial(3000))
system.time(recursive.factorial(4000))
system.time(recursive.factorial(3500))
system.time(recursive.factorial(3200))
?system.time
#f(n) = n + 3* f(n-2) + f(n-1)*2
example_function <- function(n) {
if(n==1 | n==0 ) {
return(1)
}
n1 <- 3 * example_function(n-2)
n2 <- 2*example_function(n-1)
return(n + n1 + n2)
}
example_function(2)
example_function(10)
`%squared_dist%` <- function(x,y){
return((x-y)^2)
}
13-25
13 %squared_dist% 25
library(dplyr)
`%>%`
magrittr_pipe
substitute
?substitute
x <- 2
c<- c(1:10)
rm(c)
y <- c(1:10)
x %in% y
?dunif
?rnorm
?rexp
rexp(100,rate=3)
hist(rexp(100,rate=1))
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(10000))
hist(rexp(10000,rate=1))
?paste
