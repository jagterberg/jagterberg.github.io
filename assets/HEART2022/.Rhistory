#examine eigenvalues of an ER graph
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_ER <- function(p,n) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
A[i,j] <- rbinom(1,1,p)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
p <- .1
A <- generate_adj_matrix_ER(p,n)
eigs <- eigen(A)
eigs$values
plot(eigs$values)
#what do you see?
plot(eigs$vectors[,1])
#what do you see?
plot(sqrt(n)*eigs$vectors[,1])
#what do you see?
plot(eigs$vectors[,1])
plot(eigs$values)
n <- 2000
p <- .1
A <- generate_adj_matrix_ER(p,n)
eigs <- eigen(A)
eigs$values
plot(eigs$values)
n <- 1000
p <- .3
A <- generate_adj_matrix_ER(p,n)
eigs <- eigen(A)
eigs$values
plot(eigs$values)
#what do you see?
plot(eigs$vectors[,1])
dim(eigs$vectors)
#what do you see?
plot(eigs$vectors[1,])
##########################################
rm(list=ls())
#first, we need to simulate an SBM
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_SBM <- function(B,n,memberships) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
prob <- B[memberships[i],memberships[j]]
A[i,j] <- rbinom(1,1,prob)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
a <- .1 #don't change yet!
b <- .05 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
B <- matrix(c(
a,b,
b,c
),2,2)
B
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
length(memberships)
n
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
sample(1:3)
perms
View(p1)
View(as.matrix(p1))
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
plot(eigs$values)
n <- 1000
a <- .3 #don't change yet!
b <- .39 #don't change yet!
c <- .9 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
n <- 1000
a <- .05 #don't change yet!
b <- .1 #don't change yet!
c <- .05 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
n <- 1000
a <- .1 #don't change yet!
b <- .05 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
#first, lets cluster by degrees.
degs <- A_perm %*% rep(1,n)
B
hist(degs)
estimated_memberships_degreeclustering <- kmeans(degs,2)
library(mclust)
?adjustedRandIndex
adjustedRandIndex(estimated_memberships_degreeclustering$cluster,
true_memberships)
#----------------------
#now that we have the matrix, we will do dimensionality reduction
A_svd <- irlba(A_perm,2)
A_svd$iter
A_svd$mprod
?irlba
graph_embedding <- A_svd$u
#now we're going to plot the graph_embedding
dat <- as.data.frame(graph_embedding)
dat$community <- as.factor(true_memberships)
library(ggplot2)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community))
#now we're going to plot the graph_embedding
dat <- as.data.frame(sqrt(n)*graph_embedding)
dat$community <- as.factor(true_memberships)
library(ggplot2)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community))
#-------------------------------------
#now that we have the graph embedding, we want to cluster
# the rows of it.
estimated_cluster <- kmeans(graph_embedding,2)
dat$estimated_community_kmeans <- as.factor(estimated_cluster$cluster)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community,shape=estimated_community_kmeans))
#examine eigenvalues of an ER graph
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_ER <- function(p,n) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
A[i,j] <- rbinom(1,1,p)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
p <- .1
A <- generate_adj_matrix_ER(p,n)
eigs <- eigen(A)
eigs$values
plot(eigs$values)
#what do you see?
plot(eigs$vectors[,1])
##########################################
rm(list=ls())
#first, we need to simulate an SBM
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_SBM <- function(B,n,memberships) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
prob <- B[memberships[i],memberships[j]]
A[i,j] <- rbinom(1,1,prob)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
a <- .1 #don't change yet!
b <- .05 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
#examine eigenvalues of an ER graph
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_ER <- function(p,n) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
A[i,j] <- rbinom(1,1,p)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
p <- .1
A <- generate_adj_matrix_ER(p,n)
eigs <- eigen(A)
eigs$values
plot(eigs$values)
#what do you see?
plot(eigs$vectors[,1])
#what do you see?
hist(eigs$vectors[,1])
#what do you see?
hist(sqrt(n)*eigs$vectors[,1])
#what do you see?
hist(eigs$vectors[,1])
n
##########################################
rm(list=ls())
#first, we need to simulate an SBM
library(igraph)
library(irlba)
library(Matrix)
generate_adj_matrix_SBM <- function(B,n,memberships) {
A <- matrix(0,n,n)
#generate A:
for(i in c(1:n)) {
for(j in c(1:(i-1))) {
prob <- B[memberships[i],memberships[j]]
A[i,j] <- rbinom(1,1,prob)
A[j,i] <- A[i,j]
}
}
return(A)
}
n <- 1000
a <- .1 #don't change yet!
b <- .05 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
heatmap(A_perm,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
B
n <- 1000
a <- .05 #don't change yet!
b <- .1 #don't change yet!
c <- .05 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
n <- 1000
a <- .1 #don't change yet!
b <- .09 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
n <- 1000
a <- .1 #don't change yet!
b <- .07 #don't change yet!
c <- .1 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
#first, lets cluster by degrees.
degs <- A_perm %*% rep(1,n)
estimated_memberships_degreeclustering <- kmeans(degs,2)
library(mclust)
adjustedRandIndex(estimated_memberships_degreeclustering$cluster,
true_memberships)
#----------------------
#now that we have the matrix, we will do dimensionality reduction
A_svd <- irlba(A_perm,2)
graph_embedding <- A_svd$u
#now we're going to plot the graph_embedding
dat <- as.data.frame(sqrt(n)*graph_embedding)
dat$community <- as.factor(true_memberships)
library(ggplot2)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community))
n <- 1000
a <- .2 #don't change yet!
b <- .1 #don't change yet!
c <- .2 #don't change yet!
B <- matrix(c(
a,b,
b,c
),2,2)
B
c1 <- floor(n/2)
c2 <- n - c1
#c3 <- n - c1 - c2
memberships <- c(rep(1,c1),rep(2,c2))
A <- generate_adj_matrix_SBM(B,n,memberships)
heatmap(A,symm = TRUE,Rowv=NA, Colv=NA,labRow=FALSE, labCol=FALSE, revC=TRUE)
perms <- sample(n)
perms
p1 <- as(perms,"pMatrix")
A_perm <- p1 %*% A %*% t(p1)
true_memberships <- memberships[perms]
true_memberships
#plot the eigenvalues
eigs <- eigen(A_perm)
plot(eigs$values)
#first, lets cluster by degrees.
degs <- A_perm %*% rep(1,n)
estimated_memberships_degreeclustering <- kmeans(degs,2)
library(mclust)
adjustedRandIndex(estimated_memberships_degreeclustering$cluster,
true_memberships)
#----------------------
#now that we have the matrix, we will do dimensionality reduction
A_svd <- irlba(A_perm,2)
graph_embedding <- A_svd$u
#now we're going to plot the graph_embedding
dat <- as.data.frame(sqrt(n)*graph_embedding)
dat$community <- as.factor(true_memberships)
library(ggplot2)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community))
#first, lets cluster by degrees.
degs <- A_perm %*% rep(1,n)
#first, lets cluster by degrees.
degs <- A_perm %*% rep(1,n)
hist(degs)
estimated_memberships_degreeclustering <- kmeans(degs,2)
library(mclust)
adjustedRandIndex(estimated_memberships_degreeclustering$cluster,
true_memberships)
?irlba
#----------------------
#now that we have the matrix, we will do dimensionality reduction
A_svd <- irlba(A_perm,2)
graph_embedding <- A_svd$u
#now we're going to plot the graph_embedding
dat <- as.data.frame(sqrt(n)*graph_embedding)
dat$community <- as.factor(true_memberships)
library(ggplot2)
g <- ggplot(data=dat,aes(x= V1,y=V2))
graph_embedding <- A_svd$u
dim(graph_embedding)
g + geom_point(aes(color=community))
#-------------------------------------
#now that we have the graph embedding, we want to cluster
# the rows of it.
estimated_cluster <- kmeans(graph_embedding,2)
dat$estimated_community_kmeans <- as.factor(estimated_cluster$cluster)
g <- ggplot(data=dat,aes(x= V1,y=V2))
g + geom_point(aes(color=community,shape=estimated_community_kmeans))
