#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#view each of these
View(hpgraph)
View(hpnames)
A <- graph_from_data_frame(hpgraph,directed=FALSE)
#now fill this in: we want to use the graph_from_data_frame function in
#igraph to get an adjacency matrix
A <- ###
#subset to largest connected component
components <- clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(A)[components$membership == biggest_cluster_id]
vert_ids <- V(A)[components$membership == biggest_cluster_id]
A <- graph_from_data_frame(hpgraph,directed=FALSE)
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
# ids
vert_ids <- V(A)[components$membership == biggest_cluster_id]
vert_ids
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
#fill this in: we want to use the induced_subgraph function to get the
#induced subgraph from A associated to vert_ids
A <- ###
#associate the names to each vertex ID
V(A)$charactername <- hpnames[match(names(V(A)),as.character(hpnames$id)),"name"]
adj.mat <- as_adjacency_matrix(A)
class(A)
A
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#view each of these
View(hpgraph)
#subset to enemies
hpgraph <- hpgraph[which(hpgraph$type == "-"),]
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
A <- graph_from_data_frame(hpgraph,directed=FALSE)
#now fill this in: we want to use the graph_from_data_frame function in
#igraph to get an adjacency matrix
A <- ###
#subset to largest connected component
components <- clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(A)[components$membership == biggest_cluster_id]
class(A)
A
library(igraph)
hpnames <- read.csv("characters.csv")
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#subset to enemies
hpgraph <- hpgraph[which(hpgraph$type == "-"),]
A <- graph_from_data_frame(hpgraph,directed=FALSE)
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
# ids
vert_ids <- V(A)[components$membership == biggest_cluster_id]
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#view each of these
View(hpgraph)
View(hpnames)
#subset to enemies
hpgraph <- hpgraph[which(hpgraph$type == "-"),]
A <- graph_from_data_frame(hpgraph,directed=FALSE)
#now fill this in: we want to use the graph_from_data_frame function in
#igraph to get an adjacency matrix
A <- ###
#subset to largest connected component
components <- clusters(A, mode="weak")
?clusters
A <- graph_from_data_frame(hpgraph,directed=FALSE)
#now fill this in: we want to use the graph_from_data_frame function in
#igraph to get an adjacency matrix
A <- ###
#subset to largest connected component
components <- igraph::clusters(A, mode="weak")
A <- graph_from_data_frame(hpgraph,directed=FALSE)
components <- igraph::clusters(A, mode="weak")
#now fill this in: we want to use the graph_from_data_frame function in
#igraph to get an adjacency matrix
A <- ###
#subset to largest connected component
components <- igraph::clusters(A, mode="weak")
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#view each of these
View(hpgraph)
View(hpnames)
#subset to enemies
hpgraph <- hpgraph[which(hpgraph$type == "-"),]
A <- graph_from_data_frame(hpgraph,directed=FALSE)
#subset to largest connected component
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(A)[components$membership == biggest_cluster_id]
vert_ids
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
#associate the names to each vertex ID
V(A)$charactername <- hpnames[match(names(V(A)),as.character(hpnames$id)),"name"]
adj.mat <- as_adjacency_matrix(A)
#now we want a histogram of the degrees.
hist(degree(A))
#now we want to get the adjacency matrix from the graph
#adj.mat <-
View(adj.mat)
#now we want to get the adjacency matrix from the graph
#adj.mat <-
View(as.matrix(adj.mat))
rownames(adj.mat) <- V(A)$charactername
colnames(adj.mat) <- V(A)$charactername
View(as.matrix(adj.mat))
edge_density(A)
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#subset to enemies
hpgraph <- hpgraph[which(hpgraph$type == "-"),]
A <- graph_from_data_frame(hpgraph,directed=FALSE)
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
# ids
vert_ids <- V(A)[components$membership == biggest_cluster_id]
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
triangles(A)
?triangles
count_triangles(A)
View(hpgraph)
View(as.matrix(as_adjacency_matrix(A)))
View(hpgraph)
?graph_from_data_frame
A <- as.undirected(A)
View(as.matrix(as_adjacency_matrix(A)))
E(A)
E(A)$weights
View(A)
A
V(A)$type
E(A)$type
A <- graph_from_data_frame(hpgraph)
is.directed(A)
View(as.matrix(as_adjacency_matrix(A)))
A <- as.undirected(graph_from_data_frame(hpgraph))
View(as.matrix(as_adjacency_matrix(A)))
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
# ids
vert_ids <- V(A)[components$membership == biggest_cluster_id]
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
#A2 <- induced.subgraph(A,largest.independent.vertex.sets(A)[[1]])
V(A)$char <- hpnames[match(names(V(A)),as.character(hpnames$id)),"name"]
Adj <- as_adjacency_matrix(A)
svdA <- svd(Adj)
#plot(svdA$d) #take d = 2
Xhat <- svdA$u[,c(1:2)] # %*% diag(svdA$d[c(1:2)]^(1/2))
#plot(Xhat)
Xhat_new <- Xhat
for(i in c(1:nrow(Xhat_new))) {
Xhat_new[i,] <- Xhat[i,]/sqrt(sum(Xhat[i,]^2))
}
dat <- as.data.frame(Xhat_new)
dat$names <- V(A)$char
dat2 <- as.data.frame(Xhat)
dat2$names <- V(A)$char
library(ggplot2)
ggplot(dat2, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
dat[which(dat$V2 < 0),'names']
dat[which(dat$V2 > 0),'names']
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
?graph_from_data_frame
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#first, load the igraph library
library(igraph)
?igraph
library(igraph)
hpnames <- read.csv("characters.csv")
hpgraph <- read.csv("relations.csv")
#first, load the igraph library
library(igraph)
#now we will load a graph dataset
hpnames <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/characters.csv")
hpgraph <- read.csv("https://jagterberg.github.io/assets/HEART2022/harrypotter/relations.csv")
#view each of these
View(hpgraph)
A <- as.undirected(graph_from_data_frame(hpgraph))
#subset to largest connected component
components <- igraph::clusters(A, mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(A)[components$membership == biggest_cluster_id]
vert_ids
# subgraph
A <- igraph::induced_subgraph(A, vert_ids)
#associate the names to each vertex ID
V(A)$charactername <- hpnames[match(names(V(A)),as.character(hpnames$id)),"name"]
#now we want to get the adjacency matrix from the graph
#adj.mat <-
View(as.matrix(adj.mat))
#now we want to get the adjacency matrix from the graph
#adj.mat <-
View(as_adjacency_matrix(A))
#now we want to get the adjacency matrix from the graph
#adj.mat <-
View(as.matrix(as_adjacency_matrix(A)))
