library(igraph)
for (i in c(1:8)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
}
View(gotgraph1)
View(gotname1)
View(gotname8)
#subset to LCC in each graph
for ( i in c(1:8)) {
eval(parse(text=paste0("A",i,"<-graph_fro_data_frame(gotgraph",i,",directed=FALSE)")))
}
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
A2
#subset to LCC in each graph
for ( i in c(1:8)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
View(A1)
As <- list()
for ( i in c(1:8)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
length(As)
for (i in c(1:8)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(As[[i]])[components$membership == biggest_cluster_id]
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
verticestokeep <- V(As[[1]])
verticestokeep
for (i in c(2:8)) {
verticestokeep <- intersect(verticestokeep,V(As[[i]]))
}
verticestokeep
?intersect
verticestokeep <- V(As[[1]])
verticestokeep
verticestokeep <- names(V(As[[1]]))
for (i in c(2:8)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
verticestokeep
library(igraph)
for (i in c(1:5)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
}
#subset to LCC in each graph
for ( i in c(1:5)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
As <- list()
for ( i in c(1:5)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
for (i in c(1:5)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(As[[i]])[components$membership == biggest_cluster_id]
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
verticestokeep <- names(V(As[[1]]))
for (i in c(2:5)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
verticestokeep
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[1]])
svd1 <- svd(A1)
plot(svd1$d)
svd1 <- svd(A2)
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[2]])
svd1 <- svd(A1)
plot(svd1$d)
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[3]])
svd1 <- svd(A1)
plot(svd1$d)
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
}
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
}
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
Xhats[[i]][j,] <- Xhats[[i]][j,]/sqrt(sum(Xhats[[i]][j,]^2))
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Xhats[[1]]
dim(Xhat[[1]])
dim(Xhat[[1]])
dim(Xhats[[1]])
dim(Xhats[[2]])
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
V(As[[1]])
length(V(As[[1]]))
length(V(As[[2]]))
length(verticestokeep)
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
}
length(V(As[[2]]))
length(V(As[[3]]))
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
Xhats[[i]][j,] <- Xhats[[i]][j,]/sqrt(sum(Xhats[[i]][j,]^2))
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba(Yhat,3)$u
Uhat <- irlba::irlba(Yhat,3)$u
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- 10e-4) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,1],Uhat[,2])
plot(Uhat[,1],Uhat[,3])
Yhat
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- 10e-20) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- .0000001) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- .0000000001) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,1],Uhat[,3])
plot(Uhat[,2],Uhat[,3])
As[[1]]
A
library(igraph)
for (i in c(1:5)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
}
#subset to LCC in each graph
for ( i in c(1:5)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
As <- list()
for ( i in c(1:5)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
i <- 1
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(As[[i]])[components$membership == biggest_cluster_id]
vert_ids
vert_ids <- list()
for (i in c(1:5)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids[[i]] <- V(As[[i]])[components$membership == biggest_cluster_id]
#As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids[[i]])
}
vert_ids[[1]]
vert_ids[[2]]
names(vert_ids[[1]]) %in% names(vert_ids[[2]])
sum(names(vert_ids[[1]]) %in% names(vert_ids[[2]]))
sum(names(vert_ids[[1]]) %in% names(vert_ids[[3]]))
sum(names(vert_ids[[1]]) %in% names(vert_ids[[4]]))
sum(names(vert_ids[[1]]) %in% names(vert_ids[[5]]))
sum(names(vert_ids[[3]]) %in% names(vert_ids[[5]]))
verticestokeep <- names(vert_ids[[1]])
for (i in c(2:5)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
verticestokeep
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
}
As
A <- as_adjacency_matrix(As[[i]])
A
E(As[[i]])$weight
E(As[[i]])
View(gotgraph1)
library(igraph)
for (i in c(1:5)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
eval(parse(text=paste0("gotgraph",i,"$weight <- gotgraph",i,"$Weight")))
}
#subset to LCC in each graph
for ( i in c(1:5)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
As <- list()
for ( i in c(1:5)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
vert_ids <- list()
for (i in c(1:5)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids[[i]] <- V(As[[i]])[components$membership == biggest_cluster_id]
#As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids[[i]])
}
verticestokeep <- names(vert_ids[[1]])
for (i in c(2:5)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
}
As[[i]]
E(As[[i]])
E(As[[i]])$weight
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
A <- as_adjacency_matrix(As[[i]])
A
?as_adjacency_matrix
A <- as_adjacency_matrix(As[[i]],attr= E(As[[i]])$weight)
E(As[[i]])
E(As[[i]])$weight
A <- as_adjacency_matrix(As[[i]],attr= 'weight')
A
A <- as_adjacency_matrix(As[[1]],attr= 'weight')
plot(eigen(A)$d)
plot(eigen(A)$values)
plot(svd(A)$d)
#------------------------------------
getElbows <- function(dat, n = 3, threshold = FALSE, plot = TRUE, main="", ...) {
## Given a decreasingly sorted vector, return the given number of elbows
##
## Args:
##   dat: a input vector (e.g. a vector of standard deviations), or a input feature matrix.
##   n: the number of returned elbows.
##   threshold: either FALSE or a number. If threshold is a number, then all
##   the elements in d that are not larger than the threshold will be ignored.
##   plot: logical. When T, it depicts a scree plot with highlighted elbows.
##
## Return:
##   q: a vector of length n.
##
## Reference:
##   Zhu, Mu and Ghodsi, Ali (2006), "Automatic dimensionality selection from
##   the scree plot via the use of profile likelihood", Computational
##   Statistics & Data Analysis, Volume 51 Issue 2, pp 918-930, November, 2006.
#  if (is.unsorted(-d))
if (is.matrix(dat)) {
d <- sort(apply(dat,2,sd), decreasing=TRUE)
} else {
d <- sort(dat,decreasing=TRUE)
}
if (!is.logical(threshold))
d <- d[d > threshold]
p <- length(d)
if (p == 0)
stop(paste("d must have elements that are larger than the threshold ",
threshold), "!", sep="")
lq <- rep(0.0, p)                     # log likelihood, function of q
for (q in 1:p) {
mu1 <- mean(d[1:q])
mu2 <- mean(d[-(1:q)])              # = NaN when q = p
sigma2 <- (sum((d[1:q] - mu1)^2) + sum((d[-(1:q)] - mu2)^2)) /
(p - 1 - (q < p))
lq[q] <- sum( dnorm(  d[1:q ], mu1, sqrt(sigma2), log=TRUE) ) +
sum( dnorm(d[-(1:q)], mu2, sqrt(sigma2), log=TRUE) )
}
q <- which.max(lq)
if (n > 1 && q < (p-1)) {
q <- c(q, q + getElbows(d[(q+1):p], n-1, plot=FALSE))
}
if (plot==TRUE) {
if (is.matrix(dat)) {
sdv <- d # apply(dat,2,sd)
plot(sdv,type="b",xlab="dim",ylab="stdev",main=main,...)
points(q,sdv[q],col=2,pch=19)
} else {
plot(dat, type="b",main=main,...)
points(q,dat[q],col=2,pch=19)
}
}
return(q)
}
for (i in c(1:5)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
eval(parse(text=paste0("gotgraph",i,"$weight <- gotgraph",i,"$Weight")))
}
#subset to LCC in each graph
for ( i in c(1:5)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
As <- list()
for ( i in c(1:5)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
vert_ids <- list()
for (i in c(1:5)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids[[i]] <- V(As[[i]])[components$membership == biggest_cluster_id]
#As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids[[i]])
}
verticestokeep <- names(vert_ids[[1]])
for (i in c(2:5)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
}
A <- as_adjacency_matrix(As[[1]],attr= 'weight')
getElbows(svd(A)$d)
A <- as_adjacency_matrix(As[[2]],attr= 'weight')
getElbows(svd(A)$d)
A <- as_adjacency_matrix(As[[3]],attr= 'weight')
getElbows(svd(A)$d)
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]],attr= 'weight')
Xhats[[i]] <- irlba::irlba(A,2)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- .0000000001) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,2],Uhat[,1])
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]],attr= 'weight')
Xhats[[i]] <- irlba::irlba(A,2)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
# for (j in c(1:nrow(Xhats[[i]]))) {
#   val <- sqrt(sum(Xhats[[i]][j,]^2))
#   if (val <- .0000000001) {
#     Xhats[[i]][j,] <- 1
#   } else {
#     Xhats[[i]][j,] <- Xhats[[i]][j,]/val
#   }
# }
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,2],Uhat[,1])
dat <- as.data.frame(Uhat)
dat$names <- names(V(As[[1]]))
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
library(ggplot2)
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
V(As[[i]])
V(As[[1]])
names(V(As[[1]]))
names(V(As[[2]]))
names(V(As[[1]])) %in% names(V(As[[2]]))
names(V(As[[1]])) == names(V(As[[2]]))
A
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]],attr= 'weight')
A <- A[order(rownames(A)),]
A <- A[,order(colnames(A))]
Xhats[[i]] <- irlba::irlba(A,2)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
# for (j in c(1:nrow(Xhats[[i]]))) {
#   val <- sqrt(sum(Xhats[[i]][j,]^2))
#   if (val <- .0000000001) {
#     Xhats[[i]][j,] <- 1
#   } else {
#     Xhats[[i]][j,] <- Xhats[[i]][j,]/val
#   }
# }
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
dat <- as.data.frame(Uhat)
dat$names <- names(V(As[[1]]))
library(ggplot2)
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
dat$names <- rownames(A)
library(ggplot2)
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
ggplot(dat, aes(x= V1,y=V2,  label=names))+
geom_point(size=.5) +
geom_text(hjust=1, vjust=-1,size=2,angle=45)
