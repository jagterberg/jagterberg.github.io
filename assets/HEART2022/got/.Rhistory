library(igraph)
for (i in c(1:8)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
}
View(gotgraph1)
View(gotname1)
View(gotname8)
#subset to LCC in each graph
for ( i in c(1:8)) {
eval(parse(text=paste0("A",i,"<-graph_fro_data_frame(gotgraph",i,",directed=FALSE)")))
}
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
A2
#subset to LCC in each graph
for ( i in c(1:8)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
View(A1)
As <- list()
for ( i in c(1:8)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
length(As)
for (i in c(1:8)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(As[[i]])[components$membership == biggest_cluster_id]
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
verticestokeep <- V(As[[1]])
verticestokeep
for (i in c(2:8)) {
verticestokeep <- intersect(verticestokeep,V(As[[i]]))
}
verticestokeep
?intersect
verticestokeep <- V(As[[1]])
verticestokeep
verticestokeep <- names(V(As[[1]]))
for (i in c(2:8)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
verticestokeep
library(igraph)
for (i in c(1:5)) {
eval(parse(text=paste0("gotname",i,"<-read.csv('got-s",i,"-nodes.csv')")))
eval(parse(text=paste0("gotgraph",i,"<-read.csv('got-s",i,"-edges.csv')")))
}
#subset to LCC in each graph
for ( i in c(1:5)) {
eval(parse(text=paste0("A",i,"<-graph_from_data_frame(gotgraph",i,",directed=FALSE)")))
}
As <- list()
for ( i in c(1:5)) {
eval(parse(text=paste0("As[[",i,"]] <- A",i)))
}
for (i in c(1:5)) {
components <- igraph::clusters(As[[i]], mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(As[[i]])[components$membership == biggest_cluster_id]
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
verticestokeep <- names(V(As[[1]]))
for (i in c(2:5)) {
verticestokeep <- intersect(verticestokeep,names(V(As[[i]])))
}
verticestokeep
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[1]])
svd1 <- svd(A1)
plot(svd1$d)
svd1 <- svd(A2)
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[2]])
svd1 <- svd(A1)
plot(svd1$d)
#we now embed each matrix
A1 <- as_adjacency_matrix(As[[3]])
svd1 <- svd(A1)
plot(svd1$d)
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
}
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
}
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
Xhats[[i]][j,] <- Xhats[[i]][j,]/sqrt(sum(Xhats[[i]][j,]^2))
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Xhats[[1]]
dim(Xhat[[1]])
dim(Xhat[[1]])
dim(Xhats[[1]])
dim(Xhats[[2]])
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], vert_ids)
}
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
V(As[[1]])
length(V(As[[1]]))
length(V(As[[2]]))
length(verticestokeep)
for ( i in c(1:5)) {
As[[i]] <- igraph::induced_subgraph(As[[i]], verticestokeep)
}
length(V(As[[2]]))
length(V(As[[3]]))
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
Xhats[[i]][j,] <- Xhats[[i]][j,]/sqrt(sum(Xhats[[i]][j,]^2))
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba(Yhat,3)$u
Uhat <- irlba::irlba(Yhat,3)$u
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- 10e-4) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,1],Uhat[,2])
plot(Uhat[,1],Uhat[,3])
Yhat
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- 10e-20) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- .0000001) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Yhat
#we now embed each matrix
#choose 3 arbitrarily
Xhats <- list()
for (i in c(1:5)) {
A <- as_adjacency_matrix(As[[i]])
Xhats[[i]] <- irlba::irlba(A,3)
Xhats[[i]] <- Xhats[[i]]$u %*% diag(Xhats[[i]]$d^(1/2))
for (j in c(1:nrow(Xhats[[i]]))) {
val <- sqrt(sum(Xhats[[i]][j,]^2))
if (val <- .0000000001) {
Xhats[[i]][j,] <- 1
} else {
Xhats[[i]][j,] <- Xhats[[i]][j,]/val
}
}
}
Yhat <- Xhats[[1]]
for ( i in c(2:5)) {
Yhat <- cbind(Yhat,Xhats[[i]])
}
Uhat <- irlba::irlba(Yhat,3)$u
plot(Uhat[,1],Uhat[,3])
plot(Uhat[,2],Uhat[,3])
As[[1]]
A
